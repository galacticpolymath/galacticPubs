Called from: ..stacktraceon..({
    source("helpers.R")
    source("modules.R")
    pacman_test <- tryCatch(require(pacman), error = function(e) {
        message("Recommended to install the 'pacman' package")
    })
    if (!"error" %in% class(pacman_test)) {
        p_load(shiny, shinythemes, sortable, rhandsontable, galacticPubs)
    }
    else {
        library(shiny)
        library(shinythemes)
        library(sortable)
        library(rhandsontable)
    }
    WD0 <- path <- Sys.getenv("editor_path")
    browser()
    if (is_empty(WD0)) {
        stop("Editor path not found. Maybe you didn't run the app using editor()?")
    }
    meta_path <- fs::path(WD0, "meta")
    proj <- basename(WD0)
    WD_git <- get_wd_git(WD = WD0)
    yaml_path <- fs::path(WD_git, "front-matter.yml")
    y <- get_fm(WD = WD0)
    img_loc <- paste0(getwd(), "/www/", collapse = "/")
    dir.create(img_loc, showWarnings = FALSE)
    ui <- navbarPage(theme = shinytheme("yeti"), title = "GP Lesson Editor", 
        position = "fixed-top", header = div(class = "header_save", 
            tags$link(rel = "stylesheet", type = "text/css", 
                href = "rsrc/custom.css"), div(class = "header_button_container", 
                uiOutput("yaml_update_msg"), actionButton("save", 
                  div(class = "header_button_container", img(src = "rsrc/gpicon.ico"), 
                    p(strong("Save")))))), tabPanel("Edit", htmlOutput("wd_link", 
            inline = T), h3("Step 1: Enter \"Front Matter\" Overview Info, Teach It in 15, Etc."), 
            p(class = "help-text", "Most text fields accept", 
                a("markdown formatting", href = "https://www.markdownguide.org/basic-syntax/")), 
            div(class = "inline-fields", textInput(inputId = "ShortTitle", 
                label = "shortTitle (a unique prefix for key lesson materials)", 
                value = y$ShortTitle, width = 170), dateInput(width = "115", 
                inputId = "ReleaseDate", label = "Official Release Date", 
                value = y$ReleaseDate)), div(class = "inline-fields", 
                selectizeInput(inputId = "Language", label = "LESSON\nLanguage", 
                  choices = c("", language_codes$Name), selected = y$Language, 
                  options = list(create = TRUE), width = "150"), 
                selectizeInput(inputId = "Country", label = "LESSON Country (can leave blank)", 
                  choices = c("", country_codes$Name), selected = y$Country, 
                  options = list(create = TRUE), width = "200"), 
                selectizeInput(inputId = "DefaultLanguage", label = "DEFAULT Language", 
                  choices = c("", language_codes$Name), selected = y$DefaultLanguage, 
                  options = list(create = TRUE), width = "150"), 
                selectizeInput(inputId = "DefaultCountry", label = "DEFAULT Country  (can leave blank)", 
                  choices = c("", country_codes$Name), selected = y$DefaultCountry, 
                  options = list(create = TRUE), width = "200")), 
            textInput(inputId = "Title", label = "Title", value = y$Title, 
                width = 600), textInput(inputId = "Subtitle", 
                label = "Subtitle", value = y$Subtitle, width = 600), 
            uiOutput("banner_and_logos"), checkboxGroupInput("LessonEnvir", 
                "Lesson Environment", choices = c("Classroom", 
                  "Remote"), selected = y$LessonEnvir, inline = TRUE), 
            div(class = "inline-fields", span(style = " display: inline-block;vertical-align: top;", 
                radioButtons("GradesOrYears", label = "Grades or Years", 
                  selected = y$GradesOrYears, choices = c("Grades", 
                    "Years"), inline = T, width = 150)), textInput(inputId = "ForGrades", 
                label = "For Grades (or Years)", value = y$ForGrades, 
                width = 150)), div(class = "inline-fields", selectizeInput(inputId = "TargetSubject", 
                label = "Target Subject", choices = c("Math", 
                  "Science", "Social Studies", "ELA"), selected = y$TargetSubject, 
                options = list(create = TRUE), width = "300px"), 
                textInput("EstUnitTime", "Estimated Lesson Time", 
                  value = y$EstUnitTime, placeholder = "format= '3 x 45 min classes'", 
                  width = 300)), htmlOutput("overview_text_block"), 
            selectizeInput("Tags", label = "Keywords (Tags):", 
                choices = y$Tags, selected = y$Tags, options = list(create = TRUE), 
                multiple = TRUE, width = "100%"), hr(class = "blhr"), 
            h3("Accessibility"), ediTable(id = "Accessibility"), 
            hr(class = "blhr"), hr(class = "blhr"), h3("Supporting Media"), 
            p("Files found in ./assets/_other-media-to-publish/. They'll be copied to ./published/ upon Preview and can be referenced in markdown text."), 
            p("  Ex: insert image with ![alt text](filename.png) in any text input section."), 
            htmlOutput("supporting_media"), hr(class = "blhr"), 
            h3("But wait, there's more!"), textAreaInput("Bonus", 
                label = "Bonus Material (Easter eggs and tidbits that aren't a whole extension lesson)", 
                placeholder = "Optional.", value = y$Bonus, height = "150px", 
                width = "100%"), textAreaInput("Extensions", 
                label = "Extensions (Full spin-off lessons, activities, and assessments)", 
                placeholder = "Optional.", value = y$Extensions, 
                height = "150px", width = "100%"), hr(class = "blhr"), 
            h3("Background and Research Connections"), textAreaInput("ConnectionToResearch", 
                label = "Connection to Research", placeholder = "#### Lesson Connections to This Research\nExplain in clear, concise language how students are interacting with this authentic data or following in the footsteps of scientists to develop critical thinking skills.", 
                value = y$ConnectionToResearch, height = "150px", 
                width = "100%"), textAreaInput("Background", 
                label = "Research Background:", placeholder = "![Journal article image](ScreenShotOfStudy.png)\n[Link to Original Study](StudyURL)\n#### Scientific Background\nVery accessible explanation of this line of research and why it matters.\n#### Further Reading\n- [Link to relevant thing 1](url1)\n- [Link to relevant thing 2](url2)", 
                value = y$Background, height = "150px", width = "100%"), 
            hr(class = "blhr"), h3("Feedback & Credits"), textAreaInput("Feedback", 
                label = "Feedback", placeholder = "### Got suggestions or feedback?\n#### We want to know what you think!\n[Please share your thoughts using this form](Add form link) and we will use it to improve this and other future lessons.", 
                value = y$Feedback, height = "150px", width = "100%"), 
            textAreaInput("Credits", label = "Credits", placeholder = "#### Lesson Connections to This Research\nExplain in clear, concise language how students are interacting with this authentic data or following in the footsteps of scientists to develop critical thinking skills.", 
                value = y$Credits, height = "150px", width = "100%"), 
            hr(class = "blhr"), h3("Acknowledgments"), ediTable(id = "Acknowledgments"), 
            hr(class = "blhr"), h3("Version Info"), ediTable(id = "Versions"), 
            hr(class = "blhr"), div(class = "spacer")), tabPanel("Compile", 
            htmlOutput("compile"), div(class = "spacer")), tabPanel("Preview", 
            htmlOutput("preview"), div(class = "spacer")), tabPanel("Publish", 
            radioButtons("dummy_PublicationStatus", "Lesson Status for Staging", 
                choices = c("Live", "Draft"), selected = y$PublicationStatus), 
            actionButton("StageForPublication", label = div(icon("file-import"), 
                p(strong("Stage for Publication"))), class = "publish-button"), 
            div(textOutput("stageStatus")), htmlOutput("lastStep")))
    server <- function(input, output, session) {
        WD <- reactiveVal(WD0)
        vals <- reactiveValues()
        vals$yaml_update_txt <- ("")
        vals$saved <- TRUE
        vals$staged <- FALSE
        output$stageStatus <- renderText("")
        session$onSessionEnded(function() {
            shiny::stopApp()
        })
        output$wd_link <- renderUI({
            span(style = "size:0.4rem; margin-top: -5px; margin-bottom: -15px; font-family: sans-serif;\n                      color: #5A5A5A; display: inline-block", 
                "Working Directory:", actionLink("open_WD", label = span(path_parent_dir(WD()), 
                  span(style = "background-color:#f0f4ff;font-weight:600;margin-left:-0.4rem;", 
                    basename(WD())))))
        })
        output$banner_and_logos <- renderUI({
            tagList(checkboxGroupInput("UnitBanner", label = "Lesson Banner (found in assets/_banners_logos_etc)", 
                choices = matching_files(rel_path = "assets/_banners_logos_etc/", 
                  pattern = "[Bb]anner.*\\.[png|PNG|jpeg|jpg]", 
                  WD()), selected = y$UnitBanner), selectizeInput("SponsorName", 
                label = "Sponsor Name(s) for Search Index:", 
                choices = y$SponsorName, selected = y$SponsorName, 
                options = list(create = TRUE), multiple = TRUE), 
                textAreaInput("SponsoredBy", "Sponsored By: (Add multiple entries with `- `, i.e. hyphen+space)", 
                  y$SponsoredBy, width = "100%", height = 150), 
                sortable::rank_list(input_id = "SponsorLogo", 
                  text = "Sponsor Logo(s)â€” (add images w/ 'logo' in name to 'assets/_banners_logos_etc')", 
                  labels = matching_files(rel_path = "assets/_banners_logos_etc", 
                    pattern = "^.*[Ll]ogo.*\\.[png|PNG|jpeg|jpg]", 
                    WD = WD())))
        })
        output$overview_text_block <- renderUI({
            tagList(div(class = "text-block", textAreaInput("TheGist", 
                paste0("The Gist (Concise, jargon-free lesson summary. i.e. \"The Tweet\" )"), 
                y$TheGist, height = 150, width = "100%"), div(class = "char-count", 
                renderText(paste0("Character Count= ", nchar(input$TheGist), 
                  " of 280 characters")))), div(class = "text-block", 
                p(class = "text-block-title", strong("These sections combined in JSON output as 'Text'")), 
                textAreaInput("DrivingQ", "Driving question(s) (What scientific problem(s) are we trying to solve?)", 
                  y$DrivingQ, width = "100%", height = 100), 
                textAreaInput("EssentialQ", a("Essential question(s) (What's the broader point?)", 
                  href = "https://www.authenticeducation.org/ae_bigideas/article.lasso?artid=53"), 
                  y$EssentialQ, width = "100%", height = 100), 
                textAreaInput("Hooks", "Hook(s) i.e. How will students be engaged in the lesson?:", 
                  y$Hooks, height = "100px", width = "100%"), 
                textAreaInput("MiscMD", "Additional text to be added to Overview. (Create header with '#### Header Title:' & start with '- First point' on new line for bullets", 
                  y$MiscMD, width = "100%")))
        })
        accessibility_data <- reactiveVal(y$Accessibility)
        ack_data <- reactiveVal(y$Acknowledgments)
        versions_data <- reactiveVal(y$Versions)
        ediTable_server(id = "Accessibility", rd = accessibility_data)
        ediTable_server(id = "Acknowledgments", rd = ack_data)
        ediTable_server(id = "Versions", rd = versions_data)
        observeEvent(input$open_WD, system2("open", paste0("'", 
            WD(), "'")))
        observe({
            if (!is.null(input$Feedback)) {
                data_check <- prep_input(input, WD = WD())
                vals$current_data <- data_check$current_data
                vals$saved_data <- data_check$saved_data
                if (!identical(length(data_check[[1]]), length(data_check[[2]]))) {
                  longer_list <- which.max(lengths(data_check))
                  longer_list_names <- names(data_check[[longer_list]])
                  shorter_list_names <- names(data_check[[-longer_list]])
                  prob_names <- longer_list_names[is.na(match(longer_list_names, 
                    shorter_list_names))]
                  prob_names
                  longer_index <- which(longer_list_names %in% 
                    prob_names)
                  outOfDate <- dplyr::tibble(item = prob_names, 
                    saved_data = ifelse(longer_list == 1, unlist(data_check[[1]][longer_index]), 
                      NA), current_data = ifelse(longer_list == 
                      2, unlist(data_check[[2]][longer_index]), 
                      NA))
                }
                else {
                  probs <- lapply(1:length(data_check[[1]]), 
                    function(i) {
                      !(identical(unlist(data_check[[1]][i], 
                        use.names = FALSE), unlist(data_check[[2]][i], 
                        use.names = FALSE)) | (is_empty(data_check[[1]][[i]]) & 
                        is_empty(data_check[[2]][[i]])))
                    }) %>% unlist() %>% which()
                  prob_names <- names(data_check[[1]])[probs]
                  if (length(prob_names) > 0) {
                    outOfDate <- dplyr::tibble(item = prob_names, 
                      saved_data = data_check$saved_data[probs], 
                      current_data = data_check$current_data[probs])
                  }
                  else {
                    outOfDate <- dplyr::tibble(NULL)
                  }
                }
                count_outOfDate <- nrow(outOfDate)
                template_upgraded <- data_check$current_data$TemplateVer > 
                  data_check$saved_data$TemplateVer
                if (count_outOfDate > 0) {
                  if (template_upgraded) {
                    vals$yaml_update_txt <- paste0("Save & Upgrade template:\n", 
                      data_check$saved_data$TemplateVer, " -> ", 
                      data_check$current_data$TemplateVer)
                  }
                  else {
                    vals$yaml_update_txt <- ("Not saved, yo ->")
                  }
                  vals$saved <- FALSE
                }
                else if (substr(vals$yaml_update_txt, 1, 1) == 
                  "N") {
                  vals$yaml_update_txt <- ("")
                  vals$saved <- TRUE
                }
            }
        })
        output$yaml_update_msg <- renderUI({
            tagList(span(class = ifelse(vals$saved, "yaml_saved", 
                "yaml_unsaved"), HTML(vals$yaml_update_txt)))
        })
        observe({
            template_upgraded <- vals$current_data$TemplateVer > 
                vals$saved_data$TemplateVer
            if (template_upgraded) {
                vals$current_data$RebuildAllMaterials <- TRUE
            }
            yaml::write_yaml(vals$current_data, yaml_path)
            vals$saved <- TRUE
            vals$saved_data <- vals$current_data
            vals$yaml_update_txt <- txt <- (paste0("front-matter.yml updated:<br>", 
                format(Sys.time(), "%Y-%b-%d %r")))
        }) %>% bindEvent(input$save)
        output$supporting_media <- renderUI({
            tmp <- grep(".*(?<!help.txt)$", fs::dir_ls(fs::path(WD(), 
                "assets", "_other-media-to-publish")), perl = TRUE, 
                value = TRUE)
            vals$SM_full_paths <- tmp
            vals$current_data$SupportingMedia <- fs::path_rel(tmp, 
                WD())
            tagList({
                tableOutput("supportingMediaFiles")
            })
        })
        output$supportingMediaFiles <- renderTable({
            filez <- vals$SM_full_paths
            if (length(filez) == 0) {
                return(data.frame(file = "No files found at 'assets/_other-media-to-publish'"))
            }
            else {
                info <- file.info(filez)
                fn <- basename(rownames(info))
                info_table <- dplyr::tibble(file = fn, type = RCurl::guessMIMEType(fn), 
                  size_MB = sprintf("%.1f", info$size/1e+06)) %>% 
                  dplyr::arrange(.data$type, .data$file)
                info_table
            }
        })
        output$console_text <- renderPrint("")
        output$compile <- renderUI({
            scriptFiles <- list.files(path = fs::path(WD_git, 
                "code"), pattern = ".R")
            tagList(h3("Step 2: Compile working documents and lesson assets"), 
                fluidPage(column(width = 4, div(class = "compile-section", 
                  h4("Run R Scripts to Generate Lesson Assets"), 
                  checkboxGroupInput("ScriptsToRun", "Uncheck to skip:", 
                    choices = scriptFiles, selected = isolate(scriptFiles[which(scriptFiles %in% 
                      vals$current_data$ScriptsToRun)])), actionButton("run_lesson_scripts", 
                    "Run Lesson Scripts", class = "compile-button")), 
                  div(class = "compile-section", h4("What to include:"), 
                    checkboxGroupInput("ReadyToCompile", "(Which items are ready to be compiled?)", 
                      choices = c("Front Matter", "Standards Alignment", 
                        "Teaching Materials", "Procedure", "Acknowledgments", 
                        "Versions", "Printable Lesson"), selected = isolate(vals$current_data$ReadyToCompile)), 
                    radioButtons("PullStandardsInfoFrom", label = "Match alignment codes to which set of standards?", 
                      choices = c("myFile", "standardX"), selected = isolate(vals$current_data$PullStandardsInfoFrom)), 
                    p(style = "color:gray;margin-top:-5px;font-size:1rem;", 
                      "Uncheck the above for custom, partial standards alignments."), 
                    actionButton("compile", "Save & Compile Lesson", 
                      class = "compile-button"))), column(width = 8, 
                  {
                    stndrds_saved <- file.exists(fs::path(WD_git, 
                      "saves", "standards.RDS"))
                    if ("Standards Alignment" %in% isolate(vals$current_data$ReadyToCompile) & 
                      stndrds_saved) {
                      tagList(div(class = "preview-ep", h3("Learning Epaulette Preview"), 
                        fluidRow(class = "ep-container", div(class = "ep-horiz space-top", 
                          img(src = isolate(vals$current_data$LearningEpaulette), 
                            alt = "No learning epaulette found")), 
                          div(class = "ep-vert space-top", img(src = isolate(vals$current_data$LearningEpaulette_vert), 
                            alt = "No learning epaulette found"))), 
                        div(class = "inline-fields space-top", 
                          sliderInput("LearningEpaulette_params_heightScalar", 
                            label = "Crop bottom of image to fit ggrepel labels", 
                            value = isolate(vals$current_data$LearningEpaulette_params_heightScalar), 
                            min = 0.3, max = 1.8, step = 0.05, 
                            width = 200), numericInput("LearningEpaulette_params_randomSeed", 
                            label = "Random Seed for ggrepel", 
                            value = isolate(vals$current_data$LearningEpaulette_params_randomSeed), 
                            min = 0, max = 500, step = 1, width = 110)), 
                        actionButton("remake_ep", "Update Epaulette")), 
                        div(class = "preview-chart", h3("Learning Chart Preview"), 
                          uiOutput("chart_fig_disclaimer"), img(src = isolate(vals$current_data$LearningChart), 
                            alt = "No Learning Chart Found"), 
                          textInput("LearningChart_params_caption", 
                            "Manual caption:", value = isolate(vals$current_data$LearningChart_params_caption)), 
                          textInput("LearningChart_params_centralText", 
                            "Central Text Manual caption:", value = isolate(vals$current_data$LearningChart_params_centralText)), 
                          checkboxInput("LearningChart_params_captionN", 
                            "Add standards count?", width = 150, 
                            value = isolate(vals$current_data$LearningChart_params_captionN)), 
                          actionButton("remake_chart", "Regenerate Chart")))
                    }
                    else {
                      tagList(div(class = "info", h3("Compile standards to generate learning plots.")))
                    }
                  })))
        })
        observe({
            isolate({
                current_data <- prep_input(input, WD = WD())$current_data
                yaml::write_yaml(current_data, yaml_path)
                scripts <- list.files(fs::path(WD(), "scripts"), 
                  pattern = ".R")
                script_subset <- scripts[scripts %in% input$ScriptsToRun]
                run_lesson_scripts(script_subset, WD = WD())
            })
        }) %>% bindEvent(input$run_lesson_scripts)
        observe({
            vals$current_data <- prep_input(input, WD = WD())$current_data
            yaml::write_yaml(vals$current_data, yaml_path)
            vals$current_data <- compile_unit(choices = input$ReadyToCompile, 
                WD = WD())
            yaml::write_yaml(vals$current_data, yaml_path)
        }) %>% bindEvent(input$compile)
        observe({
            isolate({
                learningEpaulette(WD = WD(), showPlot = FALSE, 
                  heightScalar = input$LearningEpaulette_params_heightScalar, 
                  randomSeed = input$LearningEpaulette_params_randomSeed)
            })
        }) %>% bindEvent(input$remake_ep, ignoreInit = T, ignoreNULL = F)
        output$chart_fig_disclaimer <- renderUI({
            if (identical(TRUE, isolate(vals$current_data$LearningChartFriendly))) {
            }
            else if (is.na(vals$current_data$LearningChartFriendly)) {
                p(style = "color:#6c2d82 ; font-weight:500", 
                  "Compile Standards to Make Learning Chart")
            }
            else {
                p(style = "color:#cb1f8e; font-weight:500", "These Standards Not Supported for Learning Chart")
            }
        })
        observe({
            if (!identical(TRUE, isolate(vals$current_data$LearningChartFriendly))) {
            }
            else {
                isolate({
                  lc <- learningChart(WD = WD(), showPlot = FALSE, 
                    caption = (input$LearningChart_params_caption), 
                    captionN = (input$LearningChart_params_captionN), 
                    centralText = (input$LearningChart_params_centralText), 
                    quotedTitle = (vals$current_data$Title))
                })
                lcpath <- fs::path("assets", "_learning-plots", 
                  paste0(formals(learningChart)$fileName, ".png"))
                if (file.exists(fs::path(WD(), lcpath))) {
                  vals$current_data$LearningChart <- lcpath
                }
                output$chart_fig <- renderPlot(grid::grid.draw(lc))
            }
        }) %>% bindEvent(input$remake_chart, ignoreInit = T, 
            ignoreNULL = F)
        output$preview <- renderUI({
            current_data <- prep_input(input, vals$current_data, 
                WD = WD())$current_data
            stage_assets(current_data, WD(), img_loc, clear = TRUE)
            sponsoredByTxt <- if (grepl("^-", current_data$SponsoredBy)) {
                parsed <- tryCatch(stringr::str_extract_all(current_data$SponsoredBy, 
                  pattern = "(?<=^- |\\n- )(.*?(\\n|$))") %>% 
                  unlist(), error = function(e) {
                  e
                })
                if (length(parsed) == 0) {
                  warning("No sponsor text extracted. Make sure you have a space after the '-' for each bullet.")
                }
                else {
                  parsed
                }
            }
            else {
                current_data$SponsoredBy
            }
            list(div(class = "lesson-preview-shadow", div(class = "lesson-preview-container", 
                h2(robust_txt(current_data$Title, "Title")), 
                h4(robust_txt(current_data$Subtitle, "Subtitle")), 
                robust_img(class = "lesson-banner", src = basename(current_data$UnitBanner), 
                  label = "Lesson Banner"), div(class = "sponsor-section", 
                  h4("Sponsored by:"), lapply(1:max(length(sponsoredByTxt), 
                    length(current_data$SponsorLogo)), function(i) {
                    div(class = "sponsor", span(class = "sponsor-text", 
                      md_txt("", sponsoredByTxt[i])), div(class = "sponsor-logo-container", 
                      robust_img(class = "sponsor-logo", src = basename(current_data$SponsorLogo[i]), 
                        "Sponsor Logo")))
                  })), div(class = "section", h3("1. Overview")), 
                div(class = "stats", div(class = "triad-container", 
                  div(class = "triad border-right", md_txt("Target subject", 
                    current_data$TargetSubject)), div(class = "triad border-right", 
                    md_txt("Grades", current_data$ForGrades)), 
                  div(class = "triad", md_txt("Est. Unit Time", 
                    current_data$EstUnitTime))), robust_img(class = "learning-epaulette", 
                  src = basename(current_data$LearningEpaulette), 
                  "Learning Epaulette")), md_txt("Driving Question(s)", 
                  current_data$DrivingQ), md_txt("Essential Question(s)", 
                  current_data$EssentialQ), if (!is_empty(current_data$MiscMD)) {
                  md_txt("", current_data$MiscMD, required = FALSE)
                } else {
                }, if (is.null(current_data$Tags)) {
                  div(class = "placeholder", h3("Keywords missing"))
                } else {
                  div(class = "keyword-cloud", h4("Keywords:"), 
                    lapply(current_data$Tags, function(x) {
                      span(class = "keyword", x)
                    }))
                }, div(class = "section", h3("2. Lesson Preview")), 
                md_txt("\"Teach It in 15\" Quick Prep", current_data$QuickPrep), 
                div(class = "spacer"), div(class = "section", 
                  h3("3. Teaching Materials")), div(class = "section", 
                  h3("4. Procedure")), div(class = "section", 
                  h3("5. Bonus Content")), div(class = "section", 
                  h3("6. Background")), div(class = "section", 
                  h3("7. Standards")), robust_img(class = "learning-chart", 
                  src = basename(current_data$LearningChart), 
                  "Learning Chart"), div(class = "section", h3("8. Feedback")), 
                div(class = "section", h3("9. Credits")), div(class = "section", 
                  h3("10. Acknowledgments")), div(class = "section", 
                  h3("11. Version Notes")))))
        })
        observe({
            current_data <- prep_input(input, vals$current_data, 
                WD = WD())$current_data
            yaml::write_yaml(current_data, yaml_path)
            if (input$dummy_PublicationStatus != vals$current_data$PublicationStatus) {
                if (input$dummy_PublicationStatus == "Live") {
                  lesson_go_live(WD = WD())
                  WD(gsub("GP-Studio", "GP-LIVE", WD(), fixed = T))
                }
                else {
                  lesson_go_draft(WD = WD())
                  WD(gsub("GP-LIVE", "GP-Studio", WD(), fixed = T))
                }
            }
            ec <- stage_assets(current_data, WD(), destFolder <- fs::path(WD(), 
                "published"), clear = TRUE, status = isolate(input$PublicationStatus)) %>% 
                catch_err(try_harder = TRUE, waits = c(1, 2, 
                  5, 8))
            if (ec) {
                output$stageStatus <- renderText({
                  "âœ“ Success"
                })
                vals$staged <- TRUE
            }
            else {
                warning(as.character(ec))
                output$stageStatus <- renderText({
                  "âœ˜ Failed"
                })
                vals$staged <- FALSE
            }
        }) %>% bindEvent(input$StageForPublication)
        output$lastStep <- renderUI({
            if (vals$staged == FALSE) {
            }
            else {
                tagList(hr(), h4("Last Step"), textInput("commit_msg", 
                  "Commit message (what're you updating?):", 
                  value = NULL), actionButton("Publish", label = div(img(src = "rsrc/gpicon.ico"), 
                  p(strong("Publish!"))), class = "publish-button"), 
                  htmlOutput("publishReport"))
            }
        })
        observe({
            pub_status <- publish(WD = WD(), commit_msg = input$commit_msg)
            vals$current_data <- overwrite_matching(safe_read_yaml(yaml_path, 
                standardize_NA = F), vals$current_data)
            if (pub_status$SUCCESS == "âœ“") {
                output$publishReport <- renderUI(h4(paste0("âœ“ Publication Success! ", 
                  Sys.time())))
            }
            else {
                warning(pub_status)
                output$publishReport <- renderUI({
                  tagList(h4("âœ˜ Publication Failed"), p("details:"), 
                    renderTable(pub_status))
                })
            }
        }) %>% bindEvent(input$Publish)
    }
    shinyApp(ui = ui, server = server)
})
